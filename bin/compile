#!/usr/bin/env bash

# Fail fast and fail hard.
set -eo pipefail

# Paths.
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2
CACHED_DIRS=".heroku"
WORKING_DIR=$(pwd)

#rm -fr $CACHE_DIR
mkdir -p $CACHE_DIR

# Versions.
PYTHON_VERSION="python-3.4.3"
PYTHON_STACK="cedar-14"
NGINX_VERSION="nginx-1.7.2"
PCRE_VERSION='pcre-8.36'
source $BIN_DIR/utils

mkdir -p $BUILD_DIR/local/sbin

if [[ ! -d "$CACHE_DIR/$PYTHON_VERSION" ]]; then
  cd $CACHE_DIR
  puts-step "Installing Python ($PYTHON_VERSION)"
  mkdir $PYTHON_VERSION
  curl https://lang-python.s3.amazonaws.com/$PYTHON_STACK/runtimes/$PYTHON_VERSION.tar.gz -s | tar zx -C $PYTHON_VERSION &> /dev/null
fi

# without setting a UTF-8 encoding, pip8 exposes a bug: https://github.com/multani/sonata/issues/72
export LANG=en_GB.utf-8

export PATH=$CACHE_DIR/$PYTHON_VERSION/bin:$PATH
export C_INCLUDE_PATH=$CACHE_DIR/$PYTHON_VERSION/include
export CPLUS_INCLUDE_PATH=$CACHE_DIR/$PYTHON_VERSION/include
export LIBRARY_PATH=$CACHE_DIR/$PYTHON_VERSION/lib
export LD_LIBRARY_PATH=$CACHE_DIR/$PYTHON_VERSION/lib

puts-step "Ensure pip"
python -m ensurepip --upgrade | indent

cd $BUILD_DIR

if [[ -f requirements.txt ]]; then
  puts-step "Installing dependencies using pip"
  python -m pip install --quiet -r requirements.txt | indent
else
  puts-step "Installing Pelican"
  python -m pip install --quiet pelican | indent

  puts-step "Installing Markdown"
  python -m pip install --quiet Markdown | indent
fi

puts-step "Running pelican"

if [[ -f publishconf.py ]]; then
  CONFIG_FILE="publishconf.py"
elif [[ -f pelicanconf.py ]]; then
  CONFIG_FILE="pelicanconf.py"
else
  puts-warn "A pelicanconf.py or publishconf.py file is required."
  exit 1
fi

pelican -d -o $BUILD_DIR/public -s $CONFIG_FILE $BUILD_DIR/content | indent

puts-step "Installing pcre ($PCRE_VERSION)"
if [[ ! -d "$CACHE_DIR/$PCRE_VERSION" ]]; then
  cd $CACHE_DIR
  curl -L http://downloads.sourceforge.net/pcre/$PCRE_VERSION.tar.bz2 -s | tar jx &> /dev/null
fi

puts-step "Installing nginx ($NGINX_VERSION)"
if [[ ! -d "$CACHE_DIR/$NGINX_VERSION" ]]; then
  cd $CACHE_DIR
  curl http://nginx.org/download/$NGINX_VERSION.tar.gz -s | tar xz &> /dev/null
  cd $NGINX_VERSION
  ./configure --prefix=$BUILD_DIR/local \
    --with-pcre=$CACHE_DIR/$PCRE_VERSION \
    --without-select_module \
    --without-poll_module \
    --without-http_gzip_module \
    --without-http_proxy_module \
    --with-http_gzip_static_module &> /dev/null
  make -j2 &> /dev/null
fi

cd $CACHE_DIR/$NGINX_VERSION
make install &> /dev/null

mkdir -p $BUILD_DIR/.profile.d
cp $ROOT_DIR/conf/path.sh $BUILD_DIR/.profile.d/

if [[ ! -f $BUILD_DIR/nginx.conf.erb ]]; then
  cp $ROOT_DIR/conf/nginx.conf.erb $BUILD_DIR/nginx.conf.erb
fi

cp $ROOT_DIR/conf/mime.types $BUILD_DIR/
cp $BIN_DIR/launch-nginx "$BUILD_DIR/local/sbin"
